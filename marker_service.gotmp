package main

import (
    "fmt"

)
// Test Vendors
hsbc := &Vendor {
    Id: 1,
    Name: "HSBC",
    MinTurnOver: 1000,
    MaxTurnOver: 10000,
    TransactionHistoryMin: 1,
}
ulster := &Vendor {
    Id: 1,
    Name: "Ulster",
    MinTurnOver: 1000000,
    MaxTurnOver: 10000000,
    TransactionHistoryMin: 365,
}

// Define an array of ponters to vendors
type Vendors []*Vendor

// Set of our test vendors
vendors := {hsbc, ulster}

// Checks expose the check method which take a struct of type customer and vendor and pass judgement
type Check interface {
    Judge(customer *Customer, vendor *Vendor) return bool
}

// Holds checks and gives it a name
type VendorCheck struct {
    Name string,
    C Check,
}

// Vendor struct
type Vendor struct {
    Id int,
    Name string,
    MinTurnOver int,
    MaxTurnOver int,
    TransactionHistoryMin int,
}



// VendorCheck satisfies Check interface by Judge function
func (vc *VendorCheck) Judge (customer *customer, vendor *Vendor) bool {
    return vc.C(customer, vendor)
}

// Function of type Judge which compares customer turnover for a year to vendor min
func AnnualTurnOver (customer *customer, vendor *Vendor) bool {
    return customer.turnoverForDays(365) >= vendor.MinTurnOver
}



